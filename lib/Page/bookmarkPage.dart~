import 'package:cookcraft/Page/profilePage.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../Components/navigationBar.dart';
import '../Components/button/customFloatingButton.dart';
import 'cameraPage.dart';
import 'mainPage.dart';
import 'addReciepPage.dart';
import 'auth/login.dart';
import 'recipeDetailPage.dart';

class BookmarkPage extends StatefulWidget {
  const BookmarkPage({Key? key}) : super(key: key);

  @override
  _BookmarkPageState createState() => _BookmarkPageState();
}

class _BookmarkPageState extends State<BookmarkPage> {
  int _currentIndex = 2;
  final List<String> _searchTags = [];
  final User? user = FirebaseAuth.instance.currentUser;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    print("Current user UID: ${user?.uid}"); // ตรวจสอบผู้ใช้ปัจจุบัน
  }

  void _addSearchTag(String tag) {
    if (tag.isNotEmpty && !_searchTags.contains(tag)) {
      setState(() {
        _searchTags.add(tag);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Cookcraft',
          style: TextStyle(color: Colors.black),
        ),
        backgroundColor: Colors.blue,
        automaticallyImplyLeading: false,
      ),
      body: user != null ? _buildBookmarkContent() : _buildLoginPrompt(),
      bottomNavigationBar: RecipeBottomNavigationBar(
        currentIndex: _currentIndex,
        onSearchPressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const MainPage()),
          );
        },
        onCameraPressed: () async {
          final List<String>? newTags = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const CameraPage(),
            ),
          );
          if (newTags != null) {
            for (var tag in newTags) {
              _addSearchTag(tag);
            }
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => MainPage(searchTags: _searchTags),
              ),
            );
          }
        },
        onRecipePressed: () {
          setState(() {
            _currentIndex = 2;
          });
        },
        onProfilePressed: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const ProfilePage()),
          );
        },
      ),
      floatingActionButton: user != null
          ? CustomFloatingButton(
        onPressed: _handleFloatingButtonPress,
      )
          : null, // ซ่อนปุ่มเพิ่มสูตรหากยังไม่ได้ล็อกอิน
    );
  }

  Widget _buildBookmarkContent() {
    return _isLoading
        ? const Center(child: CircularProgressIndicator())
        : Padding(
      padding: const EdgeInsets.all(16.0),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              decoration: InputDecoration(
                prefixIcon: Icon(Icons.search),
                hintText: 'ค้นหาสูตรอาหารที่ถูกใจ',
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
              ),
            ),
            const SizedBox(height: 20),

            // ✅ แสดง "สูตรอาหารของคุณ"
            const Text('สูตรอาหารของคุณ',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)
            ),
            _buildYourRecipes(), // ส่วนที่แก้ไขปรับปรุง

            const SizedBox(height: 20),
            const Text('สูตรอาหารที่ถูกใจ',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)
            ),
            _buildBookmarkedRecipes(),

            const SizedBox(height: 20),
            const Text('สูตรอาหารที่ดูล่าสุด',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)
            ),
            _buildRecentRecipes(),
          ],
        ),
      ),
    );
  }

  // ✅ ปรับปรุงฟังก์ชัน `_buildYourRecipes`
  Widget _buildYourRecipes() {
    if (user == null) return const Text("กรุณาเข้าสู่ระบบ");

    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('my_recipes') // ใช้ `my_recipes`
          .snapshots(),
      builder: (context, snapshot) {
        // เพิ่มการบันทึกล็อก
        print("สถานะการโหลด: ${snapshot.connectionState}");
        print("มีข้อมูลหรือไม่: ${snapshot.hasData}");
        if (snapshot.hasData) {
          print("จำนวนสูตรที่พบ: ${snapshot.data!.docs.length}");
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (snapshot.hasError) {
          print("เกิดข้อผิดพลาด: ${snapshot.error}");
          return Text("เกิดข้อผิดพลาด: ${snapshot.error}");
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          // เพิ่มปุ่มสำหรับสร้างสูตรใหม่เมื่อไม่มีสูตรอาหาร
          return Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const SizedBox(height: 10),
              const Text("ยังไม่มีสูตรอาหารของคุณ",
                  style: TextStyle(color: Colors.grey)
              ),
              const SizedBox(height: 10),
              ElevatedButton.icon(
                onPressed: () => Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const AddRecipePage())
                ).then((_) => setState(() {})),
                icon: const Icon(Icons.add),
                label: const Text("เพิ่มสูตรอาหารใหม่"),
              ),
            ],
          );
        }

        return Wrap(
          spacing: 10,
          runSpacing: 10,
          children: snapshot.data!.docs.map((doc) {
            final recipeId = doc.id;
            final recipeData = doc.data() as Map<String, dynamic>;
            print("สูตรที่พบ: ${recipeData['name']}");

            return GestureDetector(
              onTap: () {
                // ตรวจสอบว่า recipeId ถูกใช้อย่างถูกต้อง
                print("เปิดดูสูตร ID: $recipeId");
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => RecipeDetailPage(recipeId: recipeId),
                  ),
                );
              },
              child: Column(
                children: [
                  Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      image: recipeData['image_url'] != null && recipeData['image_url'].toString().isNotEmpty
                          ? DecorationImage(
                          image: NetworkImage(recipeData['image_url']),
                          fit: BoxFit.cover
                      )
                          : null,
                      color: recipeData['image_url'] == null || recipeData['image_url'].toString().isEmpty
                          ? Colors.grey[300]
                          : null,
                    ),
                    alignment: Alignment.center,
                    child: recipeData['image_url'] == null || recipeData['image_url'].toString().isEmpty
                        ? const Icon(Icons.image_not_supported, color: Colors.black45)
                        : null,
                  ),
                  const SizedBox(height: 5),
                  Text(
                      recipeData['name'] ?? "ไม่มีชื่อ",
                      style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold)
                  ),
                  // เพิ่มปุ่มโพสต์
                  TextButton(
                    onPressed: () async {
                      await _publishRecipe(recipeId);
                    },
                    child: const Text("โพสต์", style: TextStyle(color: Colors.blue)),
                  )
                ],
              ),
            );
          }).toList(),
        );
      },
    );
  }

  // เพิ่มฟังก์ชันโพสต์สูตรอาหาร
  Future<void> _publishRecipe(String recipeId) async {
    setState(() {
      _isLoading = true;
    });

    try {
      // 1. ดึงข้อมูลสูตรอาหารจาก my_recipes
      final recipeDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('my_recipes')
          .doc(recipeId)
          .get();

      if (!recipeDoc.exists) {
        throw Exception("ไม่พบสูตรอาหาร");
      }

      final recipeData = recipeDoc.data() as Map<String, dynamic>;

      // 2. สร้างสูตรใหม่ใน recipes collection
      final newRecipeRef = await FirebaseFirestore.instance.collection('recipes').add({
        'name': recipeData['name'],
        'serving': recipeData['serving'],
        'prep_time': recipeData['prep_time'],
        'image_url': recipeData['image_url'] ?? '',
        'user_id': user!.uid,
        'published': true,
      });

      // 3. ดึงส่วนผสมจาก my_recipes
      final ingredientsSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('my_recipes')
          .doc(recipeId)
          .collection('ingredients')
          .get();

      // 4. เพิ่มส่วนผสมเข้าไปใน ingredients collection
      for (var doc in ingredientsSnapshot.docs) {
        final ingredientData = doc.data();
        await FirebaseFirestore.instance.collection('ingredients').add({
          'name': ingredientData['name'],
          'quantity': ingredientData['quantity'],
          'recipe_id': newRecipeRef.id,
        });
      }

      // 5. ดึงขั้นตอนจาก my_recipes
      final stepsSnapshot = await FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('my_recipes')
          .doc(recipeId)
          .collection('steps')
          .get();

      // 6. เพิ่มขั้นตอนเข้าไปใน steps collection
      for (var doc in stepsSnapshot.docs) {
        final stepData = doc.data();
        await FirebaseFirestore.instance.collection('steps').add({
          'description': stepData['description'],
          'image_url': stepData['image_url'] ?? '',
          'recipe_id': newRecipeRef.id,
          'step_number': stepData['step_number'],
        });
      }

      // 7. ลบสูตรจาก my_recipes
      await FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('my_recipes')
          .doc(recipeId)
          .delete();

      // แสดงข้อความสำเร็จ
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('สูตรอาหารถูกโพสต์เรียบร้อยแล้ว')),
      );

      // รีเฟรชหน้าจอ
      setState(() {});
    } catch (e) {
      print("เกิดข้อผิดพลาด: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('เกิดข้อผิดพลาด: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// 📌 **ดึง "สูตรอาหารที่ถูกใจ" จาก Firestore**
  Widget _buildBookmarkedRecipes() {
    return _buildRecipeList('bookmarks');
  }

  /// 📌 **ดึง "สูตรอาหารที่ดูล่าสุด" จาก Firestore**
  Widget _buildRecentRecipes() {
    return _buildRecipeList('recent_views', orderByTimestamp: true);
  }

  /// 📌 **ดึงข้อมูลสูตรอาหารจาก Firestore (รองรับทั้ง "ที่ถูกใจ" และ "ดูล่าสุด")**
  Widget _buildRecipeList(String collectionName, {bool orderByTimestamp = false}) {
    if (user == null) return const Text("กรุณาเข้าสู่ระบบ");

    Query query = FirebaseFirestore.instance
        .collection('users')
        .doc(user!.uid)
        .collection(collectionName);

    if (orderByTimestamp) {
      query = query.orderBy('timestamp', descending: true);
    }

    return StreamBuilder<QuerySnapshot>(
      stream: query.snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return const Text("ไม่มีข้อมูล", style: TextStyle(color: Colors.grey));
        }

        return Wrap(
          spacing: 10,
          runSpacing: 10,
          children: snapshot.data!.docs.map((doc) {
            final recipeId = doc['recipe_id'];
            return _buildRecipeItem(recipeId);
          }).toList(),
        );
      },
    );
  }

  /// 📌 **ดึงข้อมูลสูตรอาหารแต่ละรายการจาก Firestore และแสดงรูปภาพ**
  Widget _buildRecipeItem(String recipeId) {
    return FutureBuilder<DocumentSnapshot>(
      future: FirebaseFirestore.instance.collection('recipes').doc(recipeId).get(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return SizedBox(
            width: 120,
            height: 150,
            child: Center(child: CircularProgressIndicator()),
          );
        }
        if (!snapshot.hasData || !snapshot.data!.exists) {
          return const SizedBox();
        }

        final recipeData = snapshot.data!.data() as Map<String, dynamic>;
        final String recipeName = recipeData['name'] ?? 'ไม่มีชื่อ';
        final String imageUrl = recipeData['image_url'] ?? '';

        return GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => RecipeDetailPage(recipeId: recipeId),
              ),
            );
          },
          child: Column(
            children: [
              Container(
                width: 120,
                height: 120,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  image: imageUrl.isNotEmpty
                      ? DecorationImage(image: NetworkImage(imageUrl), fit: BoxFit.cover)
                      : null,
                  color: imageUrl.isEmpty ? Colors.grey[300] : null,
                ),
                alignment: Alignment.center,
                child: imageUrl.isEmpty ? const Icon(Icons.image_not_supported, color: Colors.black45) : null,
              ),
              const SizedBox(height: 5),
              Text(recipeName, style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold)),
            ],
          ),
        );
      },
    );
  }

  /// 🛑 **ปุ่มลอย กดแล้วเพิ่มสูตรอาหารใหม่**
  void _handleFloatingButtonPress() {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      Navigator.push(context, MaterialPageRoute(builder: (context) => LoginPage()));
    } else {
      Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => const AddRecipePage())
      ).then((_) {
        // รีเฟรชหน้าจอเมื่อกลับมา
        setState(() {});
      });
    }
  }

  Widget _buildLoginPrompt() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.account_circle, size: 100, color: Colors.black),
          const SizedBox(height: 16),
          const Text('คุณยังไม่ได้เข้าสู่ระบบ', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
          ElevatedButton(
            onPressed: () {
              Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LoginPage()));
            },
            child: const Text('เข้าสู่ระบบ'),
          ),
        ],
      ),
    );
  }
}
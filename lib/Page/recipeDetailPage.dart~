import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';

class AddRecipePage extends StatefulWidget {
  const AddRecipePage({Key? key}) : super(key: key);

  @override
  _AddRecipePageState createState() => _AddRecipePageState();
}

class RecipeDetailPage extends StatelessWidget {
  final String recipeId; // ‡∏£‡∏±‡∏ö ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£

  const RecipeDetailPage({
    Key? key,
    required this.recipeId,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Cookcraft', style: TextStyle(color: Colors.black)),
        backgroundColor: Colors.blue,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: FutureBuilder<DocumentSnapshot>(
        future: FirebaseFirestore.instance.collection('recipes').doc(recipeId).get(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (!snapshot.hasData || !snapshot.data!.exists) {
            return const Center(
              child: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£", style: TextStyle(color: Colors.grey, fontSize: 16)),
            );
          }

          final recipeData = snapshot.data!.data() as Map<String, dynamic>;
          final String userId = recipeData['user_id'] ?? ''; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô String

          return SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                recipeData['image_url'] != null
                    ? Image.network(recipeData['image_url'], width: double.infinity, height: 200, fit: BoxFit.cover)
                    : Container(
                  color: Colors.grey[300],
                  width: double.infinity,
                  height: 200,
                  child: const Center(child: Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£")),
                ),
                Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(recipeData['name'] ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠", style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),

                      // üîπ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Firestore ‡∏ú‡πà‡∏≤‡∏ô user_id (String)
                      FutureBuilder<DocumentSnapshot>(
                        future: FirebaseFirestore.instance.collection('users').doc(userId).get(),
                        builder: (context, userSnapshot) {
                          if (userSnapshot.connectionState == ConnectionState.waiting) {
                            return const Text("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...");
                          }
                          if (!userSnapshot.hasData || !userSnapshot.data!.exists) {
                            return const Text("‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏î‡∏¢: ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏");
                          }
                          final userData = userSnapshot.data!.data() as Map<String, dynamic>;
                          final String displayName = userData['display_name'] ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

                          return Row(
                            children: [
                              const Icon(Icons.account_circle, size: 24, color: Colors.black),
                              const SizedBox(width: 8),
                              Text("‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏î‡∏¢: $displayName"),
                            ],
                          );
                        },
                      ),
                      const SizedBox(height: 8),

                      // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£
                      Row(
                        children: [
                          const Icon(Icons.access_time, size: 24, color: Colors.black),
                          const SizedBox(width: 8),
                          Text("‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥: ${recipeData['prep_time'] ?? 'N/A'}"),
                        ],
                      ),
                      const SizedBox(height: 8),

                      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
                      Row(
                        children: [
                          const Icon(Icons.people, size: 24, color: Colors.black),
                          const SizedBox(width: 8),
                          Text("‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü: ${recipeData['serving'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}"),
                        ],
                      ),
                      const SizedBox(height: 16),

                      // ‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°
                      const Text("‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      FutureBuilder<QuerySnapshot>(
                        future: FirebaseFirestore.instance.collection('ingredients').where('recipe_id', isEqualTo: recipeId).get(),
                        builder: (context, ingredientSnapshot) {
                          if (ingredientSnapshot.connectionState == ConnectionState.waiting) {
                            return const CircularProgressIndicator();
                          }

                          if (!ingredientSnapshot.hasData || ingredientSnapshot.data!.docs.isEmpty) {
                            return const Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°");
                          }

                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: ingredientSnapshot.data!.docs.map((doc) {
                              final data = doc.data() as Map<String, dynamic>;
                              final amount = data['quantity']['amount']?.toString() ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
                              final unit = data['quantity']['unit'] ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";

                              return Text("- ${data['name']} $amount $unit");
                            }).toList(),
                          );
                        },
                      ),
                      const SizedBox(height: 16),

                      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥
                      const Text("‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      FutureBuilder<QuerySnapshot>(
                        future: FirebaseFirestore.instance.collection('steps').where('recipe_id', isEqualTo: recipeId).orderBy('step_number').get(),
                        builder: (context, stepsSnapshot) {
                          if (stepsSnapshot.connectionState == ConnectionState.waiting) {
                            return const CircularProgressIndicator();
                          }

                          if (!stepsSnapshot.hasData || stepsSnapshot.data!.docs.isEmpty) {
                            return const Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥");
                          }

                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: stepsSnapshot.data!.docs.map((step) {
                              final stepData = step.data() as Map<String, dynamic>;
                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${stepData['step_number']}: ${stepData['description']}",
                                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                                  if (stepData['image_url'] != null && stepData['image_url'].isNotEmpty)
                                    Padding(
                                      padding: const EdgeInsets.symmetric(vertical: 8.0),
                                      child: Image.network(stepData['image_url']),
                                    ),
                                ],
                              );
                            }).toList(),
                          );
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}

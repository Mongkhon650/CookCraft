import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:tflite_flutter/tflite_flutter.dart';
import 'package:image/image.dart' as img;
import 'dart:typed_data';
import 'dart:convert';
import 'dart:io';
import '../models/clarifai_food_item.dart';

class CameraPage extends StatefulWidget {
  const CameraPage({Key? key}) : super(key: key);

  @override
  _CameraPageState createState() => _CameraPageState();
}

class _CameraPageState extends State<CameraPage> {
  File? _image;
  List<Map<String, dynamic>>? _labels;
  bool _isLoading = false;

  final ImagePicker _picker = ImagePicker();
  late Interpreter _interpreter;

  @override
  void initState() {
    super.initState();
    _loadModel();
  }

  // โหลดโมเดล TFLite
  Future<void> _loadModel() async {
    try {
      // ตรวจสอบว่าไฟล์มีอยู่หรือไม่
      final fileExists = File('assets/2.tflite').existsSync();
      print("Path exists: $fileExists");

      if (!fileExists) {
        throw Exception("File 2.tflite not found in assets folder.");
      }

      _interpreter = await Interpreter.fromAsset('2.tflite');
      print("Model loaded successfully");
    } catch (e) {
      print("Error loading model: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Error loading model: $e")),
      );
    }
  }

  // Crop ภาพตาม Bounding Box
  Uint8List cropImage(Uint8List imageBytes, Rect boundingBox, int imageWidth, int imageHeight) {
    final image = img.decodeImage(imageBytes);
    if (image == null) {
      throw Exception("ไม่สามารถอ่านภาพได้");
    }

    final x = (boundingBox.left * imageWidth).clamp(0, imageWidth).toInt();
    final y = (boundingBox.top * imageHeight).clamp(0, imageHeight).toInt();
    final width = ((boundingBox.right - boundingBox.left) * imageWidth)
        .clamp(0, imageWidth - x)
        .toInt();
    final height = ((boundingBox.bottom - boundingBox.top) * imageHeight)
        .clamp(0, imageHeight - y)
        .toInt();

    final croppedImage = img.copyCrop(
      image,
      x: x,
      y: y,
      width: width,
      height: height,
    );

    return Uint8List.fromList(img.encodeJpg(croppedImage));
  }

  Uint8List processImageForModel(img.Image image, int inputWidth, int inputHeight) {
    // Resize image
    final resizedImage = img.copyResize(image, width: inputWidth, height: inputHeight);

    // Prepare input buffer
    final inputBuffer = Uint8List(inputWidth * inputHeight * 3); // RGB format
    int bufferIndex = 0;

    for (int y = 0; y < resizedImage.height; y++) {
      for (int x = 0; x < resizedImage.width; x++) {
        final pixel = resizedImage.getPixelSafe(x, y);

        // ใช้ฟังก์ชันในคลาส Pixel เพื่อดึงค่าสี
        inputBuffer[bufferIndex++] = pixel.r.toInt(); // Red
        inputBuffer[bufferIndex++] = pixel.g.toInt(); // Green
        inputBuffer[bufferIndex++] = pixel.b.toInt(); // Blue
      }
    }

    return inputBuffer;
  }

  Future<void> _pickImageFromGallery() async {
    final pickedFile = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
        _labels = null;
      });
      await _processImage(_image!);
    }
  }

  Future<void> _processImage(File image) async {
    setState(() {
      _isLoading = true;
    });

    try {
      final imageBytes = await image.readAsBytes();
      final imgDecoded = img.decodeImage(imageBytes);
      if (imgDecoded == null) {
        throw Exception("ไม่สามารถอ่านภาพได้");
      }

      // Prepare Input Tensor
      final inputBuffer = processImageForModel(imgDecoded, 640, 640);

      // Prepare Output Tensor
      final outputBuffer = List.filled(1 * 10 * 6, 0.0).reshape([1, 10, 6]);

      // Run TFLite model
      _interpreter.run(inputBuffer, outputBuffer);

      // Process Output
      List<Map<String, dynamic>> allResults = [];
      for (int i = 0; i < 10; i++) {
        final score = outputBuffer[0][i][4]; // Confidence Score
        if (score > 0.5) {
          final boundingBox = Rect.fromLTRB(
            outputBuffer[0][i][1],
            outputBuffer[0][i][0],
            outputBuffer[0][i][3],
            outputBuffer[0][i][2],
          );

          final croppedImage = cropImage(imageBytes, boundingBox, imgDecoded.width, imgDecoded.height);

          // Convert to Base64 and send to Clarifai
          final croppedBase64 = base64Encode(croppedImage);
          final foodResults = await FoodItemRecognition.analyzeImages([croppedBase64]);
          allResults.addAll(foodResults);
        }
      }

      setState(() {
        _labels = allResults;
      });
    } catch (e) {
      print("Error: $e");
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    if (_interpreter != null) {
      _interpreter.close(); // ปิด interpreter หากมันถูก initialize แล้ว
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ตรวจจับวัตถุดิบอาหาร'),
        backgroundColor: Colors.pink,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          if (_image != null) Image.file(_image!, height: 200),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: _pickImageFromGallery,
            child: const Text('เลือกภาพจากแกลเลอรี่'),
          ),
          if (_isLoading) const CircularProgressIndicator(),
          if (_labels != null)
            Expanded(
              child: ListView.builder(
                itemCount: _labels!.length,
                itemBuilder: (context, index) {
                  final label = _labels![index];
                  return Card(
                    child: ListTile(
                      title: Text(label['name']),
                      subtitle: Text('Confidence: ${label['confidence']}%'),
                    ),
                  );
                },
              ),
            ),
        ],
      ),
    );
  }
}
